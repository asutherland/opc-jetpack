#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Audio Recorder.
#
# The Initial Developer of the Original Code is
# Mozilla Labs
# Portions created by the Initial Developer are Copyright (C) 2009
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   Anant Narayanan <anant@kix.in>
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

# OS detection

sys := $(shell uname -s)

ifeq ($(sys), Darwin)
  os = Darwin
  compiler = gcc3
  cxx = c++
  so = dylib
  cppflags += -dynamiclib -DDEBUG
else
  $(error Sorry, your os is unknown/unsupported: $(sys))
endif

# Arch detection
machine := $(shell uname -m)

ifeq ($(machine), i386)
  arch = x86
else
ifeq ($(machine), i586)
  arch = x86
else
ifeq ($(machine), i686)
  arch = x86
else
  $(error: Sorry, your architecture is unknown/unsupported: $(machine))
endif
endif
endif

# Universal binary so no need for $(arch) for Darwin

ifeq ($(sys), Darwin)
  platform = $(os)
else
  platform = $(os)_$(arch)-$(compiler)
endif

###################################################################
# Target and objects

target = JetpackAudio
so_target = $(target:=.$(so))
cpp_objects = $(cpp_sources:.cpp=.o)

# source and path configurations
idl = public/IAudioRecorder.idl public/IAudioEncoder.idl
cpp_sources = src/AudioRecorder.cpp src/AudioEncoder.cpp src/AudioModule.cpp

sdkdir ?= ${MOZSDKDIR}
destdir = ..
platformdir = $(destdir)/platform/$(platform)

xpidl = $(sdkdir)/bin/xpidl

# FIXME: we don't actually require this for e.g. clean
ifeq ($(sdkdir),)
  $(warning No 'sdkdir' variable given)
  $(warning It should point to the location of the Gecko SDK)
  $(warning For example: "make sdkdir=/foo/bar/baz")
  $(warning Or set the MOZSDKDIR environment variable to point to it)
  $(error )
endif

idl_headers = $(idl:.idl=.h)
idl_typelib = $(idl:.idl=.xpt)
cpp_objects = $(cpp_sources:.cpp=.o)
so_target = $(target:=.$(so))

# prefix for portaudio and libogg/vorbis
ext_prefix = /opt/local

headers = -I. \
          -Isrc/ \
		  -I$(sdkdir)/include \
          -I$(sdkdir)/include/system_wrappers \
          -I$(sdkdir)/include/xpcom \
          -I$(sdkdir)/include/string \
          -I$(sdkdir)/include/nspr \
          -I$(sdkdir)/sdk/include \
		  -I$(ext_prefix)/include

# libraries
libdirs := $(sdkdir)/lib $(sdkdir)/bin 
libs := xpcomglue_s xpcom nspr4

# We statically link portaudio and libogg/vorbis
static_libs := -framework CoreAudio \
	-framework AudioToolbox \
	-framework AudioUnit \
	-framework CoreServices \
	$(ext_prefix)/lib/libportaudio.a \
	$(ext_prefix)/lib/libsndfile.a \
	$(ext_prefix)/lib/libvorbis.a \
	$(ext_prefix)/lib/libvorbisenc.a \
	$(ext_prefix)/lib/libogg.a \
	$(ext_prefix)/lib/libFLAC.a

# compiler and Linker Flags
libdirs := $(patsubst %,-L%,$(libdirs))
libs := $(patsubst %,-l%,$(libs))
cppflags += -c -g -pipe -Os \
			-fPIC -fno-rtti -fno-exceptions -fno-strict-aliasing \
            -fno-common -fshort-wchar -fpascal-strings -pthread \
            -Wall -Wconversion -Wpointer-arith -Woverloaded-virtual -Wsynth \
            -Wno-ctor-dtor-privacy -Wno-non-virtual-dtor -Wcast-align \
            -Wno-long-long \
            -include xpcom-config.h $(headers)
ldflags += -pthread -pipe -bundle -arch i386 \
            -Wl,-executable_path,$(sdkdir)/bin \
            -Wl,-dead_strip \
            -Wl,-exported_symbol \
            -Wl,_NSGetModule \
            $(libdirs) $(libs) $(static_libs)

######################################################################

.PHONY: all build install clean

all: build

build: $(so_target) $(idl_typelib)

clean: 
	rm -f $(so_target) \
          $(cpp_objects) \
          IAudioEncoder.h IAudioRecorder.h IAudioEncoder.xpt IAudioRecorder.xpt $(target:=.res) fake.lib fake.exp

# rules to build the c headers and .xpt from idl
$(idl_headers): $(idl)
	$(xpidl) -m header -I$(sdkdir)/idl $(@:.h=.idl)

$(idl_typelib): $(idl)
	$(xpidl) -m typelib -I$(sdkdir)/idl $(@:.xpt=.idl)

$(cpp_objects): $(cpp_sources)
	$(cxx) -o $@ $(cppflags) $(@:.o=.cpp)

$(so_target): $(idl_headers) $(cpp_objects)
	$(cxx) -o $@ $(ldflags) $(cpp_objects)
	chmod +x $@

