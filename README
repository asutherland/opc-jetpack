Installing Jetpack
-------------------

To install Jetpack for development purposes to your default Firefox
profile, just enter the root directory of your Jetpack source code
checkout and run:

  python manage.py install

If you have a separate profile that you'd prefer to install the
extension under, such as 'testing', you can add that as an optional
parameter:

  python manage.py install --profile=testing

Jetpack also experimentally supports Thunderbird, and most of
manage.py's commands can be applied to Thunderbird with the '--app'
option. For instance, to install Jetpack for development purposes to
your Thunderbird profile called 'work', run:

  python manage.py install --app=thunderbird --profile=work

Building Binary Components
--------------------------

Pre-compiled binary components needed by Jetpack are kept in the
repository, so it's likely that you don't need to compile anything to
start using it. However, if a version of the components don't exist
for your OS and/or Gecko platform, you'll need to build them yourself.

First, build a version of Firefox or Thunderbird:

  https://developer.mozilla.org/En/Developer_Guide/Build_Instructions

Assuming your source directory is in "../mozilla" and your objdir is
in "../mozobj" relative to Jetpack's manage.py, run:

  python manage.py xpcom --srcdir=../mozilla --objdir=../mozobj

This will compile the components, run their tests, and install
them in the proper location.

Building Binary Components with The XULRunner SDK
-------------------------------------------------

If there's a XULRunner SDK that corresponds to the version of Firefox
or Thunderbird you want to build for, you can get away with not having
to build the entire Mozilla platform.  You can get the SDK here:

  https://developer.mozilla.org/en/Gecko_SDK

Once you've set this up, you'll still need to download the source
code for the Mozilla platform, since our build script uses the
Mozilla Build System, which doesn't come with the XULRunner SDK.

You'll need to use a mozconfig that looks something like this:

  ac_add_options --enable-application=dummy
  ac_add_options --with-libxul-sdk=/path/to/xulrunner-sdk
  ac_add_options --with-system-nspr

To create the 'dummy' application, just make a directory called
'dummy' in the root of your Mozilla source code directory, and
then put an empty file called 'build.mk' in it.

Build Mozilla with your mozconfig file to create the dummy
application, which also creates the Mozilla Build System
infrastructure our build scripts need.  Then, go to Jetpack's root
directory and run 'manage.py xpcom' as per the instructions above,
passing in the objdir of the dummy application and the directory to
your Mozilla source.

Aside from compiling the binary components, manage.py will also use
the XULRunner SDK's binaries to run the test suite.

Using Jetpack
-------------

Once Jetpack has been installed, you should be able to start up
Firefox and the 'about:jetpack' page should load. Just read the
instructions from there.

Uninstalling Jetpack
--------------------

Just run "python manage.py uninstall", optionally specifying a profile
name if necessary, just like you did with the 'install' target.
Alternatively, you can also uninstall the extension through the normal
Firefox addon management UI.

Building an XPI
---------------

To build an XPI for Jetpack, just run:

  python manage.py xpi

This will create an XPI with the name "jetpack-<version>.xpi", where
"<version>" is taken from the contents of the "em:version" element in the
"extension/install.rdf" file.
